이차원 배열 : 배열 안에 배열  // 무조건 행부터 시작

	1 차원 배열을 여러 개 선언할 때 관리하기가 힘들기 때문에
	2 차원 배열을 한 번 선언한다.

	※ 2차원 배열은 메모리 낭비가 심하므로 선호하지 않는다.

이차원 배열 선언 

	1. 자료형 [ ][ ] 배열명 = {{값1, 값2, 값3},{값4,값5,값6}}

	2. 자료형 [ ][ ] 배열명 = new 자료형 [행][열];

	3. 자료형 [ ][ ] 배열명 = null; 
	    배열명 =  new 자료형 [행][열];

	예) 
	int [][] arrData = new int [2][3];

	arrData.length 	: 행의 길이
	arrData[행].length 	: 열의 길이

------------------------------------------------------------------------
// 프로그래밍에선 메소드와 함수를 다른 개념으로 본다.
// 함수 : 어떠한 영역에도 포함되있지 않고 선언되있을때 함수라고함.
메소드 
	이름 뒤에 소괄호 
	단, 키워드 뒤에 소괄호는 메소드가 아니다.

	f	(x)	=	2x + 1
	메소드	매개		리턴값
	이름	변수

메소드 선언
	리턴타입 메소드명(자료형 매개변수명,...){
		실행할 문장;
		return 리턴값;
	}

	(1)리턴타입 (2)메소드명((3)자료형 매개변수명,...){
		(4)실행할 문장;
		(5)return 리턴값;
	}

	(1) 리턴 값이 있다면 리턴 값의 타입(자료형)을 작성한다.
	리턴 값이 없다면 void를 작성한다. // 리턴값은 문법이기 때문에 절대로 비워두면 안됨.

	(2) 동사로 작성한다.
			(글을 쓴다. / 글(매개변수), 쓴다(메소드))

	(3) 외부에서 전달 받을 값이 있다면, 자료형과 순서에 맞게 선언해준다.
	생략 시 외부에서 값을 전달받을 수 없게 된다.

	(4) 생략이 가능하다. 메소드의 기능을 구현하는 로직을 작성한다.

	(5) 생략이 가능하다. 리턴값이 있다면, 사용한 부분을 통채로 리턴값으로 봐야한다.


	f	(x)	=	2x + 1
	메소드	매개		리턴값
	이름	변수

	int f (int x) { 
		실행할 코드 없으니 생략
		return 2 * x + 1
	}

메소드 선언 순서 
	
	문제 ) 두 정수의 덧셈 메소드 선언

	1. 메소더 이름을 생각한다.
		add( ){ }, plus, sum, ...

	2. 매개변수를 생각한다.
		add(int number1, int number2){ }

	3. 실행할 문장을 작성한다.
		add(int number1, int number2){
			int result = number1 + number2;
		}

	4. 리턴값을 작성한다.
		add(int number1, int number2){
			int result = number1 + number2;
			return result;
		}

	5. 리턴 타입을 결정한다.
		int add(int number1, int number2){
			int result = number1 + number2;
			return result;
		}

메소드 주의사항

	메소드를 선언할 때에는 { }(중괄호)가 있으며, 반드시 메소드 밖에서 사용한다.

	메소드를 사용할 때에는 { }(중괄호)가 없으며, 반드시 메소드 안에서 사용한다.

메소드 사용

	메소드의 리턴 타입이 void라면 실행 메소드이므로 값으로 봐서는 안된다.

	메소드의 리턴 타입이 void가 아니라면 사용한 부분 통채로가 리턴값이다.

메소드의 목적

	1. 재사용 ( 특정성을 부여해서는 안된다.)
	2. 소스코드 간결화

리턴 할 때 
	사용한 쪽에 로직의 결과를 전달해야 할 때

리턴하면 안될 때
	사용한 쪽에 로직의 결과를 전달할 필요가 없을 때






